AWSTemplateFormatVersion: "2010-09-09"
Description: VPC, S3 bucket, IAM, DBSubnet for Kubernetes cluster.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Environment type"
        Parameters:
          - Environment
      -
        Label:
          default: "VPC parameters"
        Parameters:
          - Network
      -
        Label:
          default: "Kubernetes parameters"
        Parameters:
          -  KubernetesDNS

    ParameterLabels:
      Network:
        default: "CIDR block"
      KubernetesDNS:
        default: "Hosted Zone For Kubernetes Cluster"
      Environment:
        default: "DEV/PROD"

Parameters:
  Network:
    Description: "Network/16 from CIDR VPC blocks 10.0.0.0/8. Should be unique accross all deployment. Example: 10.2"
    Type: String
    AllowedPattern: '((\d{1,3})\.)\d{1,3}'

  KubernetesDNS:
    Type: String
    Description: Hosted zone for Kubernetes DNS.
    Default: us.dev.kube.intapp.com

  Environment:
    Description: Uses for resource tagging and select appropriate Policy for VPC Peering acknowledge
    Type: String
    AllowedValues:
      - dev
      - prod

  LoggerAccessKeyRotation:
    Type: Number
    Description: Incrementing this value notifies AWS CloudFormation that you want to rotate your access key.
    Default: 0

  contactTag:
    Type: String
    Description: value for the contact tag

Mappings:
  Environment:
    dev:
      PeerRoleArn: arn:aws:iam::278942993584:role/kubernetes-environment-PeerRoleDev-146YFE7DKI5GL
      ValidationDomain: intapp.com
    prod:
      PeerRoleArn: arn:aws:iam::278942993584:role/kubernetes-environment-PeerRoleProd-1MN9B7QSW26RW
      ValidationDomain: intapp.com

Conditions:
  DevEnvironment: !Equals [ !Ref Environment, dev ]

Resources:
#  ClusterStateStorage:
#    Type: "AWS::S3::Bucket"
#    Properties:
#      BucketName: !Join ["-", [ "k8s", "clusterstatestorage", !Ref "AWS::StackName", !Ref "AWS::Region",]]
#      LifecycleConfiguration:
#        Rules:
#          - Id: RemoveOldNonCurrent
#            NoncurrentVersionExpirationInDays: 720
#            Status: Enabled
#      VersioningConfiguration:
#        Status: Enabled
#      Tags:
#        - Key: Product
#          Value: Kubernetes-cluster
#        - Key: ProductComponents
#          Value: S3
#        - Key: Environment
#          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
#        - Key: Team
#          Value: DevOps
#        - Key: Contact
#          Value: !Ref contactTag
  LogsStorage:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [ "k8s", "clusterstatestorage", !Ref "AWS::StackName", !Ref "AWS::Region", "logs"]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: Logs
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Contact
          Value: !Ref contactTag
  ThanosStorage:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Join ["-", [ "k8s", "thanos", !Ref "AWS::StackName", !Ref "AWS::Region"]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: Thanos
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Contact
          Value: !Ref contactTag

  KubernetesHostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment:
          Kuburnetes Hostested Zone
      HostedZoneTags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: S3
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Contact
          Value: !Ref contactTag
      Name: !Ref KubernetesDNS

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Join  ["",[!Ref Network, ".0.0/16"]]
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: "k8s-cluster"
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: VPC
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Contact
          Value: !Ref contactTag

  IGW:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: Name
          Value: "k8s-cluster"
        - Key: Product
          Value: "Kubernetes-cluster"
        - Key: ProductComponents
          Value: VPC
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Contact
          Value: !Ref contactTag

  RouteTablePublic:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "k8s-cluster-public"
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: VPC
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Contact
          Value: !Ref contactTag

  GatewayAttach:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref IGW
      VpcId: !Ref VPC

  DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref RouteTablePublic

  VPCEndpointS3:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      RouteTableIds:
        - !Ref RouteTablePublic
      ServiceName: !Join [".", ["com.amazonaws", !Ref 'AWS::Region', "s3"]]
      VpcId: !Ref VPC

  ELBCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Join ["", ["*.", !Ref KubernetesDNS]]
      SubjectAlternativeNames:
        - !Ref KubernetesDNS
      DomainValidationOptions:
        - DomainName: !Ref KubernetesDNS
          ValidationDomain: !FindInMap [Environment, !Ref Environment, ValidationDomain]
        - DomainName: !Join ["", ["*.", !Ref KubernetesDNS]]
          ValidationDomain: !FindInMap [Environment, !Ref Environment, ValidationDomain]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: Certificate
        - Key: Environment
          Value:  !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: Kubernetes-cluster
        - Key: Contact
          Value: !Ref contactTag

  # Isn't possible to create peering in case VPC in different regions:
#  VPCpeerToCICD:
#    Type: "AWS::EC2::VPCPeeringConnection"
#    Properties:
#      PeerVpcId: vpc-467e4d3d
#      Tags:
#        - Key: Product
#          Value: Kubernetes-cluster
#        - Key: ProductComponents
#          Value: VPC-Peering
#        - Key: Environment
#          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
#        - Key: Team
#          Value: DevOps
#        - Key: Name
#          Value: Kubernetes-cluster
#        - Key: Contact
#          Value: !Ref contactTag
#      VpcId: !Ref VPC
#      PeerOwnerId: 382925334721
#      PeerRoleArn: !FindInMap [Environment, !Ref Environment, PeerRoleArn]

  LoggerUser:
    Type: "AWS::IAM::User"
    Properties:
      Path: "/"
      Policies:
      - PolicyName: writelogs
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action: "s3:ListBucket"
              Resource: !Join ["", ["arn:aws:s3:::", !Ref LogsStorage]]
            -
              Effect: "Allow"
              Action: "s3:PutObject"
              Resource: !Join ["", ["arn:aws:s3:::", !Ref LogsStorage, "/*"]]
      - PolicyName: thanos
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            -
              Effect: "Allow"
              Action:
               - "s3:ListBucket"
               - "s3:GetObject"
               - "s3:DeleteObject"
               - "s3:PutObject"
              Resource:
              - !Join ["", ["arn:aws:s3:::", !Ref ThanosStorage]]
              - !Join ["", ["arn:aws:s3:::", !Ref ThanosStorage, "/*"]]
      - PolicyName: VisualEditor0
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Action:
              - "cloudwatch:GetMetricData"
              - "cloudwatch:GetMetricStatistics"
              - "cloudwatch:ListMetrics"
              Resource: "*"
      UserName: !Join ["-", ["k8s-logger", !Ref "AWS::StackName", !Ref KubernetesDNS, !Ref "AWS::Region"]]

  LoggerUserAccessKey:
    Type: "AWS::IAM::AccessKey"
    Properties:
      Serial: !Ref LoggerAccessKeyRotation
      Status: Active
      UserName: !Ref LoggerUser

  DBsSubnetGroup:
    Type: "AWS::RDS::DBSubnetGroup"
    Properties:
      DBSubnetGroupName: !Ref "AWS::StackName"
      DBSubnetGroupDescription: !Join [" ", ["Created by ", !Ref "AWS::StackName"]]
      SubnetIds:
        - !Ref PrivateRDSSubnetGroup1a
        - !Ref PrivateRDSSubnetGroup1b
        - !Ref PrivateRDSSubnetGroup1c
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: Kubernetes-cluster
        - Key: Contact
          Value: !Ref contactTag

  PrivateRDSSubnetGroup1a:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Join ["", [ !Ref Network, ".20.0/22" ]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: !Join
          - '-'
          - - 'rds'
            - !Select
              - 0
              - Fn::GetAZs: !Ref 'AWS::Region'
            - !Ref KubernetesDNS
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  PrivateRDSSubnetGroup1b:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Join ["", [ !Ref Network, ".24.0/22"]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: !Join
            - '-'
            - - 'rds'
              - !Select
                - 1
                - Fn::GetAZs: !Ref 'AWS::Region'
              - !Ref KubernetesDNS
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  PrivateRDSSubnetGroup1c:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Join ["", [ !Ref Network, ".28.0/22"]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: !Join
          - '-'
          - - 'rds'
            - !Select
              - 2
              - Fn::GetAZs: !Ref 'AWS::Region'
            - !Ref KubernetesDNS
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  NotK8sPrivateSubnetGroup1a:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Join ["", [ !Ref Network, ".249.0/24" ]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: !Join
          - '-'
          - - 'notk8s-private'
            - !Select
              - 0
              - Fn::GetAZs: !Ref 'AWS::Region'
            - !Ref KubernetesDNS
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  NotK8sPrivateSubnetGroup1b:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Join ["", [ !Ref Network, ".250.0/24"]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: !Join
          - '-'
          - - 'notk8s-private'
            - !Select
              - 1
              - Fn::GetAZs: !Ref 'AWS::Region'
            - !Ref KubernetesDNS
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  NotK8sPrivateSubnetGroup1c:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Join ["", [ !Ref Network, ".251.0/24"]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: !Join
          - '-'
          - - 'notk8s-private'
            - !Select
              - 2
              - Fn::GetAZs: !Ref 'AWS::Region'
            - !Ref KubernetesDNS
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  NotK8sPublicSubnetGroup1a:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Join ["", [ !Ref Network, ".252.0/24" ]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: !Join
          - '-'
          - - 'notk8s-public'
            - !Select
              - 0
              - Fn::GetAZs: !Ref 'AWS::Region'
            - !Ref KubernetesDNS
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  NotK8sPublicSubnetGroup1b:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Join ["", [ !Ref Network, ".253.0/24"]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: !Join
          - '-'
          - - 'notk8s-public'
            - !Select
              - 1
              - Fn::GetAZs: !Ref 'AWS::Region'
            - !Ref KubernetesDNS
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  NotK8sPublicSubnetGroup1c:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Join ["", [ !Ref Network, ".254.0/24"]]
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: RDS
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Name
          Value: !Join
          - '-'
          - - 'notk8s-public'
            - !Select
              - 2
              - Fn::GetAZs: !Ref 'AWS::Region'
            - !Ref KubernetesDNS
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  NotK8sPublicSubnetGroupAssociate1a:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref NotK8sPublicSubnetGroup1a

  NotK8sPublicSubnetGroupAssociate1b:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref NotK8sPublicSubnetGroup1b

  NotK8sPublicSubnetGroupAssociate1c:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      RouteTableId: !Ref RouteTablePublic
      SubnetId: !Ref NotK8sPublicSubnetGroup1c

  RDSsSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Kubernetes-cluster-RDSs
      GroupDescription: Common security group for RDS.
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: "5432"
          ToPort: "5432"
          SourceSecurityGroupId: !Ref LambdasSecurityGroup
        - IpProtocol: "tcp"
          FromPort: "5432"
          ToPort: "5432"
          SourceSecurityGroupId: !Ref NotK8sPublicSecurityGroup
        - IpProtocol: "tcp"
          FromPort: "5432"
          ToPort: "5432"
          SourceSecurityGroupId: !Ref NotK8sPrivateSecurityGroup
        - Description: "Hardcoded IP range of Kubernetes Cluster Nodes AZ-a"
          CidrIp: !Join [".",[!Ref Network, "32.0/19"]]
          IpProtocol: "tcp"
          FromPort: "5432"
          ToPort: "5432"
        - Description: "Hardcoded IP range of Kubernetes Cluster Nodes AZ-b"
          CidrIp: !Join [".",[!Ref Network, "64.0/19"]]
          IpProtocol: "tcp"
          FromPort: "5432"
          ToPort: "5432"
        - Description: "Hardcoded IP range of Kubernetes Cluster Nodes AZ-c"
          CidrIp: !Join [".",[!Ref Network, "96.0/19"]]
          IpProtocol: "tcp"
          FromPort: "5432"
          ToPort: "5432"
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: ProductComponents
          Value: VPC-Peering
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  ExtraSecuritytoRDSforDev:
    Type: AWS::EC2::SecurityGroupIngress
    Condition: DevEnvironment
    Properties:
      CidrIp: !Join [".",[!Ref Network, "128.0/18"]]
      Description: "Additional Ip range for Kubernetes Cluster Nodes for development environment"
      FromPort: 5432
      GroupId: !GetAtt RDSsSecurityGroup.GroupId
      IpProtocol: tcp
      ToPort: 5432

  LambdasSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Kubernetes-cluster-Lambdas
      GroupDescription: Common security group for Lambda.
      SecurityGroupEgress:
        - Description: Allow DataExecutor Lambda access to internet (80)
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - Description: Allow DataExecutor Lambda access to internet (443)
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Product
          Value: Kubernetes-cluster
        - Key: Environment
          Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
        - Key: Team
          Value: DevOps
        - Key: Contact
          Value: !Ref contactTag
      VpcId: !Ref VPC

  LambdaSecurityGroupRDS:
    Type: AWS::EC2::SecurityGroupEgress
    Condition: DevEnvironment
    Properties:
      DestinationSecurityGroupId: !GetAtt RDSsSecurityGroup.GroupId
      Description: "Allow outbound to RDS"
      FromPort: 5432
      GroupId: !Ref LambdasSecurityGroup
      IpProtocol: tcp
      ToPort: 5432

  NotK8sPrivateSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Kubernetes-cluster-notk8s-private
      GroupDescription: Not k8s application.
      Tags:
      - Key: Product
        Value: Kubernetes-cluster
      - Key: Environment
        Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
      - Key: Team
        Value: DevOps
      VpcId: !Ref VPC

  NotK8sPublicSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: Kubernetes-cluster-notk8s-public
      GroupDescription: Not k8s application.
      Tags:
      - Key: Product
        Value: Kubernetes-cluster
      - Key: Environment
        Value: !Join ["-", [!Ref Environment, !Ref "AWS::Region"]]
      - Key: Team
        Value: DevOps
      - Key: Contact
        Value: !Ref contactTag
      VpcId: !Ref VPC

  LogsBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref LogsStorage
      PolicyDocument:
        Statement:
          -
            Sid: AccessFromAWSAccListBucket
            Action:
              - "s3:List*"
            Effect: Allow
            Resource:
              - !Join ["", ["arn:aws:s3:::", Ref: "LogsStorage"] ]
            Principal:
              AWS: "arn:aws:iam::278942993584:root"

          -
            Sid: AccessFromAWSAccGetObject
            Action:
              - "s3:Get*"
              - "s3:List*"
            Effect: Allow
            Resource:
              - !Join ["", ["arn:aws:s3:::", Ref: "LogsStorage",  "/*" ]]
            Principal:
              AWS: "arn:aws:iam::278942993584:root"
  VaultUser:
    Type: "AWS::IAM::User"
    Properties:
      UserName: !Join ["-", ["vault", !Select [0, !Split [".", !Ref KubernetesDNS]], !Ref "AWS::StackName", !Ref "AWS::Region" ]]
      ManagedPolicyArns:
      - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"

  VaultUserAccessKey:
    Type: "AWS::IAM::AccessKey"
    Properties:
      Status: Active
      UserName: !Ref VaultUser


Outputs:
  VPCID:
    Value: !Ref VPC
#  ClusterStateStorage:
#    Value: !Join ["/", ["s3:/", !Ref ClusterStateStorage]]
  LogsStorage:
    Value: !Ref LogsStorage
  ThanosStorage:
    Value: !Join ["/", ["s3:/", !Ref ThanosStorage]]
  HostedZoneID:
     Value: !Ref KubernetesHostedZone
  ELBCertificate:
    Value: !Ref ELBCertificate
  LoggerAccessKeyId:
    Value: !Ref LoggerUserAccessKey
  LoggerSecretAccessKey:
    Value: !GetAtt LoggerUserAccessKey.SecretAccessKey
  DBsSubnetGroup:
    Value: !Ref DBsSubnetGroup
  PrivateRDSSubnetGroup1a:
    Value: !Ref PrivateRDSSubnetGroup1a
  PrivateRDSSubnetGroup1b:
    Value: !Ref PrivateRDSSubnetGroup1b
  PrivateRDSSubnetGroup1c:
    Value: !Ref PrivateRDSSubnetGroup1c
  RDSsSecurityGroup:
    Value: !GetAtt RDSsSecurityGroup.GroupId
  LambdasSecurityGroup:
    Value: !GetAtt LambdasSecurityGroup.GroupId
  NotK8sPublicSubnetGroup1a:
    Value: !Ref NotK8sPublicSubnetGroup1a
  NotK8sPublicSubnetGroup1b:
    Value: !Ref NotK8sPublicSubnetGroup1b
  NotK8sPublicSubnetGroup1c:
    Value: !Ref NotK8sPublicSubnetGroup1c
  NotK8sPrivateSubnetGroup1a:
    Value: !Ref NotK8sPrivateSubnetGroup1a
  NotK8sPrivateSubnetGroup1b:
    Value: !Ref NotK8sPrivateSubnetGroup1b
  NotK8sPrivateSubnetGroup1c:
    Value: !Ref NotK8sPrivateSubnetGroup1c
  VaultAccessKeyId:
    Value: !Ref VaultUserAccessKey
  VaultSecretAccessKey:
    Value: !GetAtt VaultUserAccessKey.SecretAccessKey